version: '3.7'

services:
  postgresql:
    container_name: postgres
    image: postgres:15.2-alpine3.17
    env_file:
      - .env
    volumes:
      - /opt/docker/postgres/var/lib/postgresql:/var/lib/postgresql
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - custom

  postgresql_test:
    container_name: postgres_test
    image: postgres:15.2-alpine3.17
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME_TEST}
    ports:
      - "6000:5432"
    restart: always
    networks:
      - custom

  redis:
    container_name: redis
    image: redis:latest
    depends_on:
      - postgresql
    env_file:
      - .env
    volumes:
      - /opt/docker/redis/etc:/usr/local/etc/redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DATABASE=${REDIS_DATABASE}
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - custom

  app:
    build: .
    container_name: app
    depends_on:
      postgresql:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8088:8088"
    restart: always
    networks:
      - custom

networks:
  custom:
    driver: bridge
